#! /bin/bash


show_help()
{
  cat <<'EOF'

build-cyverse-rs

Usage:
 build-cyverse-rs [options] <tag> <cfg-file> <script-dir>

Builds a docker image containing a resource server configured for the CyVerse
Data Store. It assumes the Dockerfile is named 'Dockerfile' and is in the
CONTEXT directory. If there is no Dockerfile, it will use a default one.

It also generates the script 'irods-svc'. This script can be used to start and
stop a container with the resource running in it. 'irods-svc start' creates and
starts a detached container named 'rs' with the resource server running, and
'irods-svc stop' stops and removes the 'rs' container.

Parameters:
 <tag>         the docker image tag
 <env-file>    the file providing the required environment variables, see below
 <script-dir>  the directory where the scripts will be written: defaults to
               current working directory

Options:
 -c, --context CONTEXT  The docker build context: default current working
                        directory

 -h, --help  show help and exit

Environment Variables:
 CYVERSE_DS_CLERVER_USER  (optional) the name of the rodsadmin user representing
                          the resource server within the zone: default
                          'ipc_admin'
 CYVERSE_DS_RES_NAME      the name of the storage resource that will be served
 CYVERSE_DS_RES_SERVER    the FQDN or address used by the IES and other resource
                          servers to communicate with this one
 CYVERSE_DS_RES_VAULT     (optional) the host directory where the container will
                          mount the vault: default '<home>/vault', where <home>
                          is the home directory of the user starting the docker
                          container
EOF
}


main()
{
  local context=.
  local scriptDir=.

  if ! opts=$(getopt --name build --options c:h --longoptions context:,help -- "$@")
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -c|--context)
        context="$2"
        shift 2
        ;;
      -h|--help)
        show_help
        return 0
        ;;
      --)
       shift
       break
       ;;
      *)
        show_help >&2
        return 1
        ;;
    esac
  done

  if [ "$#" -lt 1 ]
  then
    printf 'An image tag is required.\n' >&2
    show_help >&2
    return 1
  fi

  local tag="$1"

  if [ "$#" -lt 2 ]
  then
    printf 'An environment file is required.\n' >&2
    show_help >&2
    return 1
  fi

  local envFile="$2"

  if [ "$#" -ge 3 ]
  then
    scriptDir="$3"
  fi

  build "$tag" "$context" "$envFile" "$scriptDir"
}


build()
{
  local tag="$1"
  local context="$2"
  local envFile="$3"
  local scriptDir="$4"

  . "$envFile"
  check_env CYVERSE_DS_RES_NAME
  check_env CYVERSE_DS_RES_SERVER

  local containerVault=/irods_vault/"$CYVERSE_DS_RES_NAME"
  local hostVault="${CYVERSE_DS_RES_VAULT:-\$HOME/vault}"
  local hostLog="${CYVERSE_DS_LOG_DIR:-\$HOME/log}"
  local user="${CYVERSE_DS_CLERVER_USER:-ipc_admin}"

  mk_image "$context" "$tag" "$user" "$containerVault" >&2

  mk_svc_script "$tag" "$hostLog" "$hostVault" "$containerVault" > "$scriptDir"/irods-svc
  chmod +x "$scriptDir"/irods-svc
}


#
# Checks for the existence of an environment variable. If the variable doesn't
# exist, it writes a message to standard error and returns 1.
#
# Parameter:
#  var  the environment variable to check
#
check_env()
{
  local var="$1"

  if [ -z "${!var}" ]
  then
    printf 'The environment variable %s is not set.\n' "$var" >&2
    show_help >&2
    return 1
  fi
}


#
# Generates the image build command
#
# Parameters:
#  tag             the tag of the image that the command will build
#  user            the clerver user
#  containerVault  the base directory with the container where the files will be
#                  stored
#  defaultResName  the default resource name
#  srcAccess       the docker build args for setting the context or build
#                  commands access
#
mk_build_cmd()
{
  local tag="$1"
  local user="$2"
  local containerVault="$3"
  local defaultResName="$4"
  local srcAccess="$5"

  cat <<EOF
docker build --build-arg CYVERSE_DS_CLERVER_USER="$user" \
             --build-arg CYVERSE_DS_CONTAINER_VAULT="$containerVault" \
             --build-arg CYVERSE_DS_DEFAULT_RESOURCE="$defaultResName" \
             --build-arg CYVERSE_DS_SERVER_CNAME="$CYVERSE_DS_RES_SERVER" \
             --tag "$tag" \
             $srcAccess
EOF
}


#
# Build the image.
#
# Parameters:
#  context         the build context
#  tag             the tag to assign to the built image
#  user            the clerver user
#  containerVault  the base directory within the container where the files will
#                  be stored
mk_image()
{
  local context="$1"
  local tag="$2"
  local user="$3"
  local containerVault="$4"

  local defaultResName="$CYVERSE_DS_RES_NAME"Res
  local srcAccess=

  if [ -e "$context"/Dockerfile ]
  then
    srcAccess="'$context'"
  else
    srcAccess="- <<< 'FROM ds-res-base-onbuild'"
  fi

  eval $(mk_build_cmd "$tag" "$user" "$containerVault" "$defaultResName" "$srcAccess")
}


#
# Generate a script for starting a container from the newly build image.
#
# Parameters:
#  tag             the tag of the image to start
#  hostLog         the host directory where teh container will mount
#                  /var/lib/irods/iRODS/server/log
#  hostVault       the host directory where the container will mount its vault
#  containerVault  the base directory within the container where the files will
#                  be stored
#
mk_svc_script()
{
  local tag="$1"
  local hostLog="$2"
  local hostVault="$3"
  local containerVault="$4"

  cat <<EOF
#! /bin/bash
#
# Usage:
#  irods-svc (start <secrets-file> | stop)
#
# Parameters:
#  <secrets-file>  The name of a file holding the secrets required for the
#                  resource server to join the CyVerse grid.
#
# This script starts or stops a container holding an iRODS resource server
# configured to serve the $CYVERSE_DS_RES_NAME storage resource for the CyVerse
# Data Store.
#

if [ "\$#" -lt 1 ]
then
  printf 'One of the actions "start" or "stop" needs to be provided\n' >&2
  exit 1
fi

action="\$1"

if [ "\$action" = start ]
then
  if [ "\$#" -lt 2 ]
  then
    printf 'A secrets file is required\n' 2>&1
    exit 1
  fi

  secrets="\$2"

  docker run \\
      --detach --tty \\
      --env CYVERSE_DS_HOST_UID="\$(id --user)" \\
      --env-file "\$secrets" \\
      --hostname rs \\
      --mount type=bind,source='$hostVault',target='$containerVault' \\
      --mount type=bind,source='$hostLog',target=/var/lib/irods/iRODS/server/log \\
      --mount type=tmpfs,destination=/var/lib/irods/iRODS/server/log/proc \\
      --name cyverse-rs \\
      --publish 1247:1247/tcp \\
      --publish 1248:1248/tcp \\
      --publish 20000-20009:20000-20009/tcp \\
      --publish 20000-20009:20000-20009/udp \\
      --restart on-failure \\
      '$tag' \\
    > /dev/null

    if [ "$?" -eq 0 ]
    then
      printf 'started iRODS resource server\n'
    else
      printf 'failed to start iRODS resource server\n'
    fi
elif [ "\$action" = stop ]
then
  docker stop cyverse-rs > /dev/null
  docker rm cyverse-rs > /dev/null
  printf 'stopped iRODS resource server\n'
else
  printf 'unknown action "%s"\n' "\$action" >&2
fi
EOF
}


set -e

main "$@"
