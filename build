#! /bin/bash


show_help()
{
  cat <<'EOF'

build

Usage:
 build [options] <tag>

Builds a docker image containing a resource server configured for the CyVerse
Data Store. It also generates a script for running the docker container and
writes it to standard output.

Parameters:
 <tag>  the docker image tag

Options:
 -h, --help  show help and exit

Environment Variables:
 CYVERSE_DS_CLERVER_USER       (optional) the name of the rodsadmin user
                               representing the resource server within the
                               zone: default 'ipc_admin'
 CYVERSE_DS_CONTROL_PLANE_KEY  the encryption key required for communicating
                               over the iRODS grid control plane.
 CYVERSE_DS_NEGOTIATION_KEY    the encryption key shared by the zone for
                               advanced negotiation during client connections
 CYVERSE_DS_RES_NAME           the name of the storage resource that will be
                               served
 CYVERSE_DS_RES_SERVER         the FQDN or address used by the IES and other
                               resource servers to communicate with this one
 CYVERSE_DS_RES_VAULT          (optional) the host directory where the container
                               will mount the vault: default '<home>/vault',
                               where <home> is the home directory of the user
                               starting the docker container
 CYVERSE_DS_ZONE_KEY           the shared secret used during server-to-server
                               communication
EOF
}


main()
{
  if ! opts=$(getopt --name build --options h --longoptions help -- "$@")
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h|--help)
        show_help
        return 0
        ;;
      --)
       shift
       break
       ;;
      *)
        show_help >&2
        return 1
        ;;
    esac
  done

  if [ "$#" -lt 1 ]
  then
    printf 'An image tag is required.\n' >&2
    show_help >&2
    return 1
  fi

  local tag="$1"

  check_env CYVERSE_DS_CONTROL_PLANE_KEY
  check_env CYVERSE_DS_NEGOTIATION_KEY
  check_env CYVERSE_DS_RES_NAME
  check_env CYVERSE_DS_RES_SERVER
  check_env CYVERSE_DS_ZONE_KEY

  local user="${CYVERSE_DS_CLERVER_USER:-rods}"
  local hostDir="${CYVERSE_DS_RES_VAULT:-\$HOME/vault}"
  local containerDir=/irods_vault/"$CYVERSE_DS_RES_NAME"

  mk_image "$tag" "$user" "$containerDir" >&2
  mk_start_script "$tag" "$hostDir" "$containerDir"
}


#
# Checks for the existence of an environment variable. If the variable doesn't
# exist, it writes a message to standard error and returns 1.
#
# Parameter:
#  var  the environment variable to check
#
check_env()
{
  local var="$1"

  if [ -z "${!var}" ]
  then
    printf 'The environment variable %s is not set.\n' "$var" >&2
    show_help >&2
    return 1
  fi
}


#
# Build the image.
#
# Parameters:
#  tag             the tag to assign to the built image
#  user            the clerver user
#  containerVault  the base directory within the container where the files will
#                  be stored
mk_image()
{
  local tag="$1"
  local user="$2"
  local containerVault="$3"

  local baseDir=$(dirname $(readlink --canonicalize "$0"))
  local defaultResName="$CYVERSE_DS_RES_NAME"Res

  (cd "$baseDir"/irods-netcdf-build && ./build.sh)
  (cd "$baseDir"/irods-setavu-plugin && ./build.sh)

  docker build --build-arg CLERVER_USER_NAME="$user" \
               --build-arg CONTROL_PLANE_KEY="$CYVERSE_DS_CONTROL_PLANE_KEY" \
               --build-arg DEFAULT_RESOURCE_DIR="$containerVault" \
               --build-arg DEFAULT_RESOURCE_NAME="$defaultResName" \
               --build-arg NEGOTIATION_KEY="$CYVERSE_DS_NEGOTIATION_KEY" \
               --build-arg RS_CNAME="$CYVERSE_DS_RES_SERVER" \
               --build-arg ZONE_KEY="$CYVERSE_DS_ZONE_KEY" \
               --tag "$tag" \
               "$baseDir"
}


#
# Generate a script for starting a container from the newly build image.
#
# Parameters:
#  tag             the tag of the image to start
#  hostVault       the host direcotry where the container will mount its vault
#  containerVault  the base directory within the container where the files will
#                  be stored
#
mk_start_script()
{
  local tag="$1"
  local hostVault="$2"
  local containerVault="$3"

  cat <<EOF
#! /bin/bash
#
# This script starts a container holding an iRODS resource server configured to
# serve the $CYVERSE_DS_RES_NAME storage resource for the CyVerse Data Store.
#

docker run --interactive --rm --tty \\
           --env LOCAL_USER_ID="\$(id --user)" \\
           --name rs \\
           --publish 1247:1247/tcp \\
           --publish 1248:1248/tcp \\
           --publish 20000-20009:20000-20009/tcp \\
           --publish 20000-20009:20000-20009/udp \\
           --volume "\$HOME"/auth:/auth \\
           --volume "\$HOME"/log:/var/lib/irods/iRODS/server/log \\
           --volume "$hostVault":'$containerVault' \\
           '$tag'
EOF
}


set -e

main "$@"
